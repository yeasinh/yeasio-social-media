# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  token: String!
  name: String!
  email: String!
}

type HelloType {
  message: String!
}

type Notification {
  id: ID!
  type: NotificationType!
  userId: String!
  actorId: String!
  postId: String
  message: String!
  isRead: Boolean!
  createdAt: DateTime!
}

enum NotificationType {
  LIKE
  COMMENT
  SHARE
  MESSAGE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  email: String!
  name: String!
  profilePhoto: String
  createdAt: DateTime!
}

type Post {
  id: String!
  title: String!
  content: String!
  createdAt: DateTime!
  author: User!
  sharedFrom: Post
}

type Like {
  id: String!
  postId: String!
  userId: String!
  createdAt: DateTime!
}

type Comment {
  id: String!
  content: String!
  createdAt: DateTime!
  postId: String!
  userId: String!
  user: User!
}

type Conversation {
  id: ID!
  participantIds: [String!]!
  title: String
  createdAt: DateTime!
}

type Message {
  id: ID!
  conversationId: String!
  senderId: String!
  content: String!
  isRead: Boolean!
  createdAt: DateTime!
}

type TypingEvent {
  conversationId: String!
  senderId: String!
}

type UnreadCount {
  conversationId: String!
  unreadCount: Float!
}

type Query {
  hello: HelloType!
  getAllPosts: [Post!]!
  getMyNotifications: [Notification!]!
  getLikesByPost(postId: String!): [Like!]!
  getCommentsByPost(postId: String!): [Comment!]!
  getMyProfile: User!
  getMyPosts: [Post!]!
  getUserById(userId: String!): User!
  getConversations: [Conversation!]!
  getMessages(conversationId: String!): [Message!]!
  getUnreadCount: [UnreadCount!]!
  searchMessages(conversationId: String!, keyword: String!): [Message!]!
}

type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createPost(input: CreatePostInput!): Post!
  updatePost(input: UpdatePostInput!): Post!
  deletePost(postId: String!): Boolean!
  sharePost(input: SharePostInput!): Post!
  markNotification(input: MarkNotificationInput!): Notification!
  toggleLike(input: ToggleLikeInput!): String!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(commentId: String!): Boolean!
  updateMyProfile(input: UpdateProfileInput!): User!
  startConversation(input: StartConversationInput!): Conversation!
  sendMessage(input: SendMessageInput!): Message!
  markMessagesAsRead(conversationId: String!): Boolean!
  emitTyping(conversationId: String!): Boolean!
  uploadFile(file: Upload!): String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  content: String!
  mediaUrl: String
}

input UpdatePostInput {
  postId: String!
  title: String
  content: String
}

input SharePostInput {
  postId: String!
  title: String
  content: String
}

input MarkNotificationInput {
  notificationId: String!
  isRead: Boolean!
}

input ToggleLikeInput {
  postId: String!
}

input CreateCommentInput {
  postId: String!
  content: String!
}

input UpdateCommentInput {
  commentId: String!
  content: String!
}

input UpdateProfileInput {
  name: String
  profilePhoto: String
}

input StartConversationInput {
  participantIds: [String!]!
  title: String
}

input SendMessageInput {
  conversationId: String!
  content: String!
  mediaUrl: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Subscription {
  messageSent(conversationId: String!): Message!
  typingEvent(conversationId: String!): TypingEvent!
}