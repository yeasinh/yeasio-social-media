// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts    Post[]
  likes    Like[]
  comments Comment[]

  notifications   Notification[] @relation("UserNotifications")
  triggeredNotifs Notification[] @relation("ActorRelation")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  likes    Like[]
  comments Comment[]

  sharedFrom   Post?   @relation("SharedPosts", fields: [sharedFromId], references: [id])
  sharedFromId String? // nullable, since not all posts are shared
  sharedPosts  Post[]  @relation("SharedPosts")

  notifications Notification[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Ensures one like per user per post
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

enum NotificationType {
  LIKE
  COMMENT
  SHARE
  MESSAGE
}

model Notification {
  id   String           @id @default(uuid())
  type NotificationType

  user   User   @relation("UserNotifications", fields: [userId], references: [id])
  userId String

  actor   User   @relation("ActorRelation", fields: [actorId], references: [id])
  actorId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
